install.packages("markdown")
install.packages("ggplot2")
install.packages("devtools")
a <- installed.packages()
view(a)
a<- install.packages()
a <-install.packages()
a<-install.packages()
a <- install.packages()
view(a)
a <- installed.packages()
view(a)
equisxe
:v
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("devtools")
a <- installed.packages()
view(a)
X <- 1
x <- 1
x <- 2
print(x)
print(X) #Al poner mayuscula, que no esta definida, me marcara error
Print(Y)
#la alternativa es solicitar una impresion implicita
x
#la asignacion puede hacerse tambien de terxtos
msg <- "hola"
#la asignacion puede hacerse tambien de terxtos
msg <- hola
#la asignacion puede hacerse tambien de terxtos
msg <- hola
#la asignacion puede hacerse tambien de terxtos
msg <- "Hola"
#al solicitar la impresion, me debera enseñar el mensaje
print(msg)
x <- #Expresion incompleta
x <- #Expresion incompleta
3
x <-
x <-
#Impresion de un arreglo
x <- 1:20
x
y
y <- 3:9
y
z <- 99:43
z
#El operador ":" me permite generar secuencias numericas
w <- 3:14.5
w
#Aqui se esta realizando una asignación
x <- 1 #ctrl enter
inf
#En el caso de decimales , me genera secuencia de enteros
#El numero entre parentesis en la ubicacion del numero que sigue
x <- 1
inf
infert
exp(-Inf)
x <- 1
Inf
1/0
#es posible hacer algunas operaciones con este valor
exp(-Inf) #0
Inf + Inf #inf
Inf*Inf #Inf
Inf - Inf #NaN(not a number)
Inf/Inf #NaN
#Es posible crear un vector con la funcion c()
x <- c(TRUE,FALSE,TRUE,TRUE,F,F,T)
#Es posible crear un vector con la funcion c()
S <- c(TRUE,FALSE,TRUE,TRUE,F,F,T)
a <- c(1L,3L,5,-4L)
d <-(1,3,5,-4) #Numeric
d <-(1,3,5,-4) #Numeric
d <- (1,3,5,-4) #Numeric
d <- c(1,3,5,-4) #Numeric
o <- c(1+1i,3+4i,-5+6i,3.14-1.16i)
x <- c("a","b","c","Hola","Mundo")
a <- c(1L,3L,5,-4L)#Integer
#Otro camino seria con la funcion vector
x <- vector("numeric",length=10)
#Otro camino seria con la funcion vector
x <- vector("numeric",length = 10)
y <- c(1.7,"a") #character
x
r <- c(TRUE,2)
t <- c(TRUE,2L) #integer
y <- c(FALSE,2L,5,5+4i) #complex
y
f <- c(TRUE,1)
x <- c("a","b","c")
as.numeric(x)
#coercion forzada
x <- 0.6 "Integer"
#coercion forzada
x <- 0.6 #Integer
as.nuemric(x)  #Numeric
as.numeric(x)  #Numeric
as.logicall(x)  #Los vuelve 0 se vuelve false
as.logical(x)  #Los vuelve 0 se vuelve false
as.character(x) #character- todo es texto
#Errores en la coercion forzada
x <- c("a","b","c")
as.numeric(x)
as.logical(x)
as.complex(x)
#Listas
x <- list(1,"a", TRUE, 3+2i,5L)
x
#Todos los elementos de una lista mantienen la clase que originalmente
x <- list(1,"a", TRUE, 3+2i,5L, 1:50)
x
m <- matrix(nrow= 2, ncol=2)
as.numeric(x)
matrix(base)
matrix (base)
?matrix
m <- matrix(nrow= 2, ncol=2)
m <- matrix(nrow= 2, ncol=3)
m
dim(m)
attributes(m)
attributes(m)
#Como llenar una matrix
m <- matrix(data=1.6,nrow=2,ncol=3)
m <- matrix(1:6,2,3)
m
m <- matrix(nrow= 2, ncol=3)
m <- matrix(NA,2,3)
m
#la manera automatica de llenarse fue columna por columna
#si yo quisiera que se llemara fila por fila, seria
m <- matrix(data=1:6, nrow=2, ncol=3, byrow=TRUE)
m
m <- matrix(1:6,2,3,TRUE)
m
#Una manera alternativa de crear una matrix es desde un vector
m <- 1:10
dim(m) <- c(2,5)
m
#Otra manera de crear una matriz es uniendo diferentes vectores
x <- 1:3
y <- 10:12
#CBing, unir columnas
cbind(x,y)
#rbind unir filas
rbind(x,y)
#Factores
x <- factor(c("Si","Si","No","No","Si"))
x
x<- factor(c("Azul","Verde","Verde","Azul","Rojo"))
x
table(x)
unclass(x)
'factors'
?factor
x<- factor(c("Azul","Verde","Verde","Azul","Rojo"))
x<- factor(c("Azul","Verde","Verde","Azul","Rojo"),leves=c("Rojo","Amarillo","Verde","Naranja"))
x<- factor(c("Azul","Verde","Verde","Azul","Rojo"),leves=c("Rojo","Amarillo","Verde","Naranja"))
x<- factor(c("Azul","Verde","Verde","Azul","Rojo"),levels=c("Rojo","Amarillo","Verde","Naranja"))
x
x<- factor(c("Azul","Verde","Verde","Azul","Rojo"),levels=c("Rojo","Amarillo","Verde","Azul"))
x
unclass(x)
#Valores faltantes
x <- c(1,2,NA,10,3)
is.na(x)
isnan(x)
isnan(x)
is.nan(x)
x <- c(1,2,NA,10,"a")
is.nan(x)
x <- c(1,2,NaN,10,3)
is.nan(x)
isna(x)
is.na(x)
data.frame(foo=1:4, bar=c(T,T,F,F))
nrow(x)
ncol(x)
x <-data.frame(foo=1:4, bar=c(T,T,F,F))
x
nrow(x)
ncol(x)
x<- 1:3
manes(x)
names(x)
names(x) <- c("foo", "bar","aja")
x
names(x)
x <-list(A=1,b=2,c=3)
x
#Nombres en matrices
m <- matrix(1:4,nrow=2,ncol=2)
dimnames(m) <- list(c("a","b"),c("c","d"))
m
dimnames(m) <- list(c("a","b"),c("c","d","e","f","g"))
m <- matrix(1:10,nrow=2,ncol=5)
m <- matrix(1:10,nrow=2,ncol=5)
dimnames(m) <- list(c("a","b"),c("c","d","e","f","g"))
m
mtcars
x <- data.frame(mtcars)
dput(x)
dput(x, file="~/GitHub/Software_Actuarial_III/Carros.R")
carrosLaura <- dget(file= "~/GitHub/Software_Actuarial_III/Carros.R")
dput(carrosLaura)
x <-"Software Actuarial III"
y <- data.frame(a=1,b="a")
dump?
dump(c("x","y"))
?dump
dump(c("x","y"),file="data.R")
setwd("~/GitHub/Software_Actuarial_III")
x <-"Software Actuarial III"
y <- data.frame(a=1,b="a")
dump(c("x","y"),file="data.R")
setwd("~/GitHub/Software_Actuarial_III")
x <-"Software Actuarial III"
y <- data.frame(a=1,b="a")
?dump
dump(c("x","y"),file="data.R")
rm(x,y)
setwd("~/GitHub/Software_Actuarial_III")
x <-"Software Actuarial III"
y <- data.frame(a=1,b="a")
dump(c("x","y"),file="data.R")
rm(x,y)
x
y
source("data.R")
x
y
#CONEXIONES
#Los datos se leen usando interfaces de conexiones, normalmente las conexiones se convierten en archivos.
#file, abre la conexion de un archivo
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con,7)
x
?writeLines
#WriteLine
#
writeLines(readLines(con), "FCFM.txt")
x
x <- readLines(con)
x[7]<-"t<title>FCFM: Estariamos mejor con otro director </title>""
#WriteLine
#
writeLines(readLines(con), "FCFM.txt")
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con)
x[7] <- "t<title>FCFM: Estariamos mejor con otro director </title>""
writeLines(x,"FCFM.html")
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con)
x[7] <- "t<title>FCFM: Estariamos mejor con otro director </title>"
writeLines(x,"FCFM.html")
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con,7)
x
#Creamos un vector
x <- c("a","b","c","c","d","e")
#Veamos el vector
x
#Extraemos el elemento con [ ]
x[1]
x[2]
#Tambien podemos extraer una secuencia de elementos
x[1:4]
#Es posible extraer los elementos que cumplen una restricción
x[x>"b"]
#De manera equivalente se puede obtener un vector lógico
u<- x =="c"
u
x[u]
x[5-3]
x[1:2]
#Creamos una lista
x <- list(foo=1:4, bar=0.6)
x
x[1]
x[[1]]
#El resultado es el vector de la secuencia de numeros
x$foo
x["bar"]
x
x[["bar"]]
#
x <- list(foo=1:4, bar=0.6, baz="Hola")
x[c(1,3)]
x[[c(1,3)]]
name <- "baz"
x[name]
#Anidar subconjuntos de listas
#se pueden extraer elementos de los elementos extraidos
x <- list(a=list(10,12,14), b= list(3.14,2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
x <- matrix(1:6,2,3)
x
x[1,2]
#Con drop= FALSE, se mantiene la dimensión y
#el resultado sera una matriz
x<-[1,2, drop= FALSE]
#Con drop= FALSE, se mantiene la dimensión y
#el resultado sera una matriz
x[1,2, drop= FALSE]
x[1,]
x[1, , drop=FALSE]
x<- list(aasdfafk=1:5)
x$a
x[["a"]]
x[["a", exact=FALSE]]
