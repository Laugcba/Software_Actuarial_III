library(swirl)
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1:20)
seq(1,20)
seq(0,10, by=0.5)
seq(5, 10, length=30)
my_seq<- seq(5, 10, length=30)
length(my_seq)
1!:length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_long(my_seq)
seq_along(my_seq)
rep(0,time=40
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<- c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<- c("My","name","is")
bye()
x<-lsit(a=1:5, b=rnoem(10000))
lapply(x,mean)
$a
$b
x<-list(a=1:5,b=rnorm(10000))
lapply(x, mean)
$a
$b
x<-list(a=1:5,b=rnorm(10000))
lapply(x, mean)
x<-list(a=1:5,b=rnorm(10000))
x<-list(a=1:5,b=rnorm(10000))
lapply(x, mean)
x<-list(a=1:5,b=rnorm(10), c=rnorm(10,1), d=rnorm(10,2))
lapply(x, mean)
c
x<- 1:4
lapply(x,runif)
lapply(x,runif, max=15, min=5)
x<- 1:4
lapply(x,runif, max=15, min=5)
x<- list(a=1:5,b=rnorm(10), c=rnorm(10,3), d=rnorm(10,5))
lapply(x,mean)
sapply(x,mean)
x<- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
x<- matrix(rnorm(200),20,10)
apply(x,1,quantile, probs=c(0.25,0.75))
?quantile
a<- array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2),mean)
rowMeans(a,dims = 2)
rowMeans(a,dims = 1)
rowMeans(a,dims = 3
rowMeans(a,dims = 3)
list(rep(1,4),rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
library(swirl)
swirl()
my_char
paste(my_char, collapse = " ")
my_name<- c(my_char, Wyour_name)
my_name<- c(my_char, your_name_here)
my_name<- c(my_char, "your_name_here")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep= " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<- sample(c(y,z),100)
is.na(my_data)
my_data
my_na<-is.na(my_data)
my_na
my_data== NA
sum(my_na)
print(my_data)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(2,5,7)
[c(2,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo= 11, bar = 2, norf = NA).
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<- c(11,2,NA)
names(vect2)<-  c("foo", "bar", "norf")
indentical
identical(vect,vect2)
vect["bar"]
vect["foo","bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<- my_vector
?`matrix
?matrix
my_matrix2<- matrix(data=1:20, nrow = 4,ncol=5)
identical(my_matrix, my_matrix2)
patients<- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data<- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data)<- cnames
my_da
my_data
TRUE==TRUE
(FALSE==TRUE)
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE).
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
swirl()
#Listas
x <- list(1,"a", TRUE, 3+2i,5L)
x
m <- matrix(nrow= 2, ncol=3)
m <- matrix(NA,2,3)
m
dim(m)
attributes(m)
#Como llenar una matrix
m <- matrix(data=1.6,nrow=2,ncol=3)
m
#la manera automatica de llenarse fue columna por columna
#si yo quisiera que se llemara fila por fila, seria
m <- matrix(data=1:6, nrow=2, ncol=3, byrow=TRUE)
m
m <- matrix(1:6,2,3,TRUE)
m
#Una manera alternativa de crear una matrix es desde un vector
m <- 1:10
m
#Otra manera de crear una matriz es uniendo diferentes vectores
x <- 1:3
y <- 10:12
#CBind, unir columnas
cbind(x,y)
#rbind unir filas
rbind(x,y)
#Factores
x <- factor(c("Si","Si","No","No","Si"))
x
x<- factor(c("Azul","Verde","Verde","Azul","Rojo"))
x
table(x)
unclass(x)
x<- factor(c("Azul","Verde","Verde","Azul","Rojo"),levels=c("Rojo","Amarillo","Verde","Naranja"))
x
#Valores faltantes
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
#Extraccion de valores faltantes
airquality[1:6,]
complete.cases(airquality[1:6,])
completos <- complete.cases(airquality)
data <- airquality[completos,]
data[1:6,]
#Algunas operaciones
x<- 1:4;  y <- 6:9
x+y #pocision a ´pocision
x<2
x>2
x>=2
y==8
x*y
x/y
#En matrices
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x
y
#En matrices
x <- matrix(1:4,2,4); y <- matrix(rep(10,4),2,2)
x
#En matrices
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x
y
x*y
x/y
x;y;x%*%y
y%*%x
x%*%y
if(condición){
#algunas intrucciones
} else {
##algunas otras intrucciones
}
x=3
if (x>5){
print("Mayor")
}else {
print("Menor")
}
x=7
if(x<5){
print("menor a 5")
}else if(x<=10){
print("entre 5 y 10")
}else {
print("Mayor a 10")
}
x<-4
y<- 3
if (x>3){
y<- 10
}else {
y<- 0
}
x<-4
x=4
y= 3
y <- if(x>3){
10
}else {
0
}
for (i in 1:10){
print(i)
}
for (i in 34:60){
print(i)
}
for (i in c("a","b","c")){
print(i)
}
x <- c("a","b","c","d")
for(i in 1:4){
print(x[i])
}
#A lo largo de x
for(i in seq_along(x)){
print(x[i])
}
for(letra in x){
print(letra)
}
for(i in 1:4) print(x[i])
x<- matrix(1:6,2,3)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i,j])
}
}
x<- matrix(1:6,2,3)
seq_len(nrow(x))
1:nrow(x)
x<- matrix(1:6,2,3)
seq_len(nrow(x))
1:nrow(x)
x<- matrix(1:6,2,3)
seq_len(ncol(x))
1
x<- matrix(1:6,2,3)
seq_len(ncol(x))
1:ncol(x)
count <- 0
while(count<10){
print(count)
count<- count +1
}
z <- 5
while(z>=3 && z<= 10){
print(z)
moneda <- rbinom(1,1,0.5)
if(moneda==1){ #Caminata Aleatoria
z<- z+1
}else {
z<- z-1
}
}
set.seed(1)
intentos<-1000
a<-0
for (i in 1:intentos)
z <- 5
x<-vector("numeric")
while(z>=3 && z<= 10){
moneda <- rbinom(1,1,0.5)
x<-c(x,z)
if(moneda==1){ #Caminata Aleatoria
z<- z+1
}else {
z<- z-1
}
}
suma2 <- function(x,y){
x+y
}
suma2(1,3) #4
mayor10 <- function(x){
seleccionados <- x>10
x[seleccionados]
}
mayor10(1:20) # 11 12 13 14 15 16 17 18 19 20
mayor <- function(x,n=10){
seleccionados <- x>n
x[seleccionados]
# o x[x>n]
}
x <- matrix(1:100,20,5)
promediocol <- function(x,quitarNa=TRUE){
nc <- ncol(x) #Numero de colunmas
medias <- vector("numeric",nc)
for(i in 1:nc){
medias[i] <- mean(x[,i], na.rm=quitarNa) #promedio de x en todas las filas y remueve los valores faltantes
}
medias
}
promediocol(x)
f <- function(a,b){
a^2
}
f(3)
g <- function(a,b){
print(a)
print(b)
}
g(3)
g <- function(a,b){
print(a)
print(b)
}
g(3,4)
myplot <- function(x,y,tipo="l"){
plot(x,y,type=tipo)
}
myplot(1:10,10:1)
plot(1:10,10:1)
#Paste
#DEspues del argumento ... cualquier otro argumento que se desee usar
paste("Jose","Paz","alex","/")
paste("Jose","Paz","alex",sep="/")
#antes del argumento  no es necesario seleccional el nombre de algumeno si se encuentra en la posicion correcta
mypaste <- function(sep=" ", ...){
paste(...,sep=sep)
}
args(paste)
swirl()
library(swirl)
swirl()
bye()
x<-list(a=1:5,b=rnorm(10000))
x
lapply(x, mean)
x<-list(a=1:5,b=rnorm(10000))x
x<-list(a=1:5,b=rnorm(10000))
lapply(x, mean)
x<-list(a=1:5,b=rnorm(10), c=rnorm(10,1), d=rnorm(10,2))
lapply(x, mean)
x<- 1:4
lapply(x,runif)
x<- 1:4
lapply(x,runif, max=15, min=5)
x<- list(a=1:5,b=rnorm(10), c=rnorm(10,3), d=rnorm(10,5))
lapply(x,mean)
sapply(x,mean)
sapply(x,mean)
x<- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
#otras formas de apply
x<- matrix(rnorm(200),20,10)
apply(x,1,quantile, probs=c(0.25,0.75))
a<- array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2),mean)
rowMeans(a,dims = 2)
list(rep(1,4),rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
install.packages("swirl")
library(swirl)
swirl()
bye()
x<- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
unclass(as.Date("1998-07-14"))
weekdays(as.Date("1996-04-01"))
a <- as.POSIXct("1996-04-01")
b<- as.POSIXlt("1996-04-01")
setwd("~/GitHub/Software_Actuarial_III")
x <-"Software Actuarial III"
y <- data.frame(a=1,b="a")
dump(c("x","y"),file="data.R")
rm(x,y)
source("data.R")
noise<-function(n,mean,sd){
rnoem(n,mean,sd)
}
noise<-function(n,mean,sd){
rnoem(n,mean,sd)
}
noise(5,1,2)
noise<-function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
?tapply
x<- c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
f
tapply(x,f,mean)
26*10
260/30
18*10
180/20
9+8.6+8
25.6/3
}
f<-gl(3,10)
f
x<-c(rnorm(10),runif(10), rexp(10))
f<-gl(3,10)
f
library(datasets)
head(airquality)
454545
lapply(split(x,f), mean)
library(datasets)
head(airquality)
split(airquality,airquality$Month)
sapply(split(airquality,airquality$Month),mean)
sapply(split(airquality,airquality$Month),mean, NA.rm=TRUE)
sapply(split(airquality,airquality$Month),mean, na.rm=TRUE)
sapply(split(airquality,airquality$Month),colMeans, na.rm=TRUE)
colMeans(airquality)
colMeans(airquality,na.rm=T)
x<-rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
interaction(f1,f2)
library(datasets)
head(mtcars)
split(mtcars,mtcars$hp)
sapply(split(mtcars,mtcars$hp),mean)
sapply(split(mtcars,mtcars$hp),colMeans, na.rm=TRUE)
sapply(split(mtcars,mtcars$hp),colMeans, na.rm=TRUE)
library(datasets)
head(mtcars)
split(mtcars,mtcars$cy)
sapply(split(mtcars,mtcars$cy),mean)
split(mtcars,mtcars$cyl)
sapply(split(mtcars,mtcars$cyl),mean)
sapply(split(mtcars,mtcars$cyl),colMeans, na.rm=TRUE)
colMeans(mtcars)
colMeans(mtcars,na.rm=T)
head(mtcars)
sapply(split(mtcars,mtcars$cyl),mean)
